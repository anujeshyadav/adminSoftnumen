{"version":3,"sources":["../node_modules/country-state-city/lib/utils/index.js","views/apps/freshlist/accounts/EditAccount.js","../node_modules/country-state-city/lib/state.js","../node_modules/country-state-city/lib/country.js","../node_modules/country-state-city/lib/city.js"],"names":["findEntryByCode","source","code","codex","findIndex","c","isoCode","undefined","findStateByCodeAndCountryCode","countryCode","defaultKeyToCompare","entity","name","compare","a","b","keyToCompare","CreateAccount","EditOneData","useState","CreatAccountView","setCreatAccountView","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","handleInputChange","useParams","e","type","i","target","value","checked","test","length","useEffect","console","log","CreateAccountView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","catch","err","className","onSubmit","preventDefault","_id","CreateAccountUpdate","status","swal","lg","md","MyDropdown","dropdown","label","_text","required","onChange","option","map","key","_attributes","input","ele","View","Edit","role","roles","find","permissions","includes","phoneinput","sm","inputClass","country","onKeyDown","countryCodeEditable","phone","style","color","disabled","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","City","getCitiesOfState","placeholder","CheckBox","marginRight","size","Radiobutton","marginLeft","Ripple","getAllStates","stateList","states","filter","sort","getStateByCodeAndCountry","stateCode","getStateByCode","warn","sortByIsoCode","countries","getCountryByCode","countryList","getAllCities","cityList","getCitiesOfCountry","sortByStateAndName","cities","result"],"mappings":"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","file":"static/js/171.b40984e0.chunk.js","sourcesContent":["export const findEntryByCode = (source, code) => {\n    if (code && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport const findStateByCodeAndCountryCode = (source, code, countryCode) => {\n    if (code && countryCode && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code && c.countryCode === countryCode;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport function defaultKeyToCompare(entity) {\n    return entity.name;\n}\nexport const compare = (a, b, \n// eslint-disable-next-line no-unused-vars\nkeyToCompare = defaultKeyToCompare) => {\n    if (keyToCompare(a) < keyToCompare(b))\n        return -1;\n    if (keyToCompare(a) > keyToCompare(b))\n        return 1;\n    return 0;\n};\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport swal from \"sweetalert\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountUpdate,\r\n  CreateAccountView,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\n\r\nconst CreateAccount = ({ EditOneData }) => {\r\n  const [CreatAccountView, setCreatAccountView] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const Params = useParams();\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // console.log(formData);\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n\r\n  useEffect(() => {\r\n    console.log(EditOneData);\r\n    setFormData(EditOneData);\r\n    // CreateAccountUpdate(Params.id)\r\n    //   .then((res) => {\r\n    //     console.log(res);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        // console.log(JSON.parse(jsonData));\r\n        setCreatAccountView(JSON.parse(jsonData));\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(formData, EditOneData?._id);\r\n    CreateAccountUpdate(EditOneData?._id, formData)\r\n      .then((res) => {\r\n        if (res.status) {\r\n          setFormData({});\r\n          // window.location.reload();\r\n          swal(\"Acccont Updated Successfully\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Account Information</h1>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n                          ?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n                          ?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.CreateAccount?.input?.map((ele, i) => {\r\n                    let View = \"\";\r\n                    let Edit = \"\";\r\n                    if (ele?.role) {\r\n                      let roles = ele?.role?.find(\r\n                        (role) => role._attributes?.name === \"WARRANTY APPROVER\"\r\n                      );\r\n                      View = roles?.permissions?._text.includes(\"View\");\r\n                      Edit = roles?.permissions?._text.includes(\"Edit\");\r\n                    }\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          {Edit && Edit ? (\r\n                            <>\r\n                              <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n                                  <PhoneInput\r\n                                    inputClass=\"myphoneinput\"\r\n                                    country={\"us\"}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    countryCodeEditable={false}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(phone) => {\r\n                                      setFormData({\r\n                                        ...formData,\r\n                                        [ele?.name?._text]: phone,\r\n                                      });\r\n                                    }}\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              {View && View ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                    <FormGroup>\r\n                                      <Label>{ele?.label?._text}</Label>\r\n                                      <PhoneInput\r\n                                        disabled\r\n                                        inputClass=\"myphoneinput\"\r\n                                        country={\"us\"}\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        countryCodeEditable={false}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(phone) => {\r\n                                          setFormData({\r\n                                            ...formData,\r\n                                            [ele?.name?._text]: phone,\r\n                                          });\r\n                                        }}\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : null}\r\n                            </>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.country}\r\n                                onChange={(country) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"country\"]: country,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  formData?.country?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.State}\r\n                                onChange={(State) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  formData?.State?.countryCode,\r\n                                  formData?.State?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.City}\r\n                                onChange={(City) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {Edit && Edit ? (\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n\r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    )\r\n                                  }\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          ) : (\r\n                            <>\r\n                              {View && View ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                    <FormGroup>\r\n                                      <Label>{ele?.label?._text}</Label>\r\n\r\n                                      <Input\r\n                                        disabled\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        type={ele?.type?._attributes?.type}\r\n                                        placeholder={ele?.placeholder?._text}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(e) =>\r\n                                          handleInputChange(\r\n                                            e,\r\n                                            ele?.type?._attributes?.type,\r\n                                            i\r\n                                          )\r\n                                        }\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : null}\r\n                            </>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n                <div className=\"container\">\r\n                  <Label className=\"py-1\">Notification</Label>\r\n                  <div>\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.CheckBox?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <>\r\n                              <span key={i} className=\"mx-2\">\r\n                                <Input\r\n                                  style={{ marginRight: \"3px\" }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  name={ele?.name?._text}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(e, \"checkbox\")\r\n                                  }\r\n                                />{\" \"}\r\n                                <span\r\n                                  className=\"mt-1 mx-1\"\r\n                                  style={{ marginRight: \"40px\" }}\r\n                                >\r\n                                  {ele?.label?._text == \"Whatsapp\" ? (\r\n                                    <BsWhatsapp\r\n                                      className=\"mx-1\"\r\n                                      color=\"#59CE72\"\r\n                                      size={25}\r\n                                    />\r\n                                  ) : (\r\n                                    <>\r\n                                      {ele.label?._text == \"SMS\" ? (\r\n                                        <>\r\n                                          <FcPhoneAndroid size={30} />\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <BiEnvelope className=\"\" size={30} />\r\n                                        </>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                </span>\r\n                              </span>\r\n                            </>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </Row>\r\n              <hr />\r\n              <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mt-2\"\r\n                                style={{ marginLeft: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Update\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateAccount;\r\n","import stateList from './assets/state.json';\nimport { findEntryByCode, findStateByCodeAndCountryCode, compare } from './utils';\n// Get a list of all states.\nexport function getAllStates() {\n    return stateList;\n}\n// Get a list of states belonging to a specific country.\nexport function getStatesOfCountry(countryCode = '') {\n    if (!countryCode)\n        return [];\n    // get data from file or cache\n    const states = stateList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return states.sort(compare);\n}\nexport function getStateByCodeAndCountry(stateCode, countryCode) {\n    if (!stateCode)\n        return undefined;\n    if (!countryCode)\n        return undefined;\n    return findStateByCodeAndCountryCode(stateList, stateCode, countryCode);\n}\n// to be deprecate\nexport function getStateByCode(isoCode) {\n    // eslint-disable-next-line no-console\n    console.warn(`WARNING! 'getStateByCode' has been deprecated, please use the new 'getStateByCodeAndCountry' function instead!`);\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(stateList, isoCode);\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.isoCode}`;\n        });\n    });\n}\nexport default {\n    getAllStates,\n    getStatesOfCountry,\n    getStateByCodeAndCountry,\n    getStateByCode,\n    sortByIsoCode,\n};\n","import countryList from './assets/country.json';\nimport { compare, findEntryByCode } from './utils';\n// Get a country by isoCode.\nfunction getCountryByCode(isoCode) {\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(countryList, isoCode);\n}\n// Get a list of all countries.\nfunction getAllCountries() {\n    return countryList;\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return entity.isoCode;\n        });\n    });\n}\nexport default {\n    getCountryByCode,\n    getAllCountries,\n    sortByIsoCode,\n};\n","import cityList from './assets/city.json';\nimport { compare } from './utils';\n// Get a list of all cities.\nfunction getAllCities() {\n    return cityList;\n}\n// Get a list of cities belonging to a specific state and country.\nfunction getCitiesOfState(countryCode, stateCode) {\n    if (!stateCode)\n        return [];\n    if (!countryCode)\n        return [];\n    const cities = cityList.filter((value) => {\n        return value.countryCode === countryCode && value.stateCode === stateCode;\n    });\n    return cities.sort(compare);\n}\n// Get a list of cities belonging to a specific country.\nfunction getCitiesOfCountry(countryCode) {\n    if (!countryCode)\n        return [];\n    const cities = cityList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return cities.sort(compare);\n}\nfunction sortByStateAndName(cities) {\n    return cities.sort((a, b) => {\n        const result = compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.stateCode}`;\n        });\n        if (result !== 0)\n            return result;\n        return compare(a, b);\n    });\n}\nexport default {\n    getAllCities,\n    getCitiesOfState,\n    getCitiesOfCountry,\n    sortByStateAndName,\n};\n"],"sourceRoot":""}