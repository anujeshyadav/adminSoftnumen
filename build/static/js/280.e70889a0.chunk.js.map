{"version":3,"sources":["views/apps/freshlist/customer/warehouse/CreateWareHouse.js"],"names":["CreateWareHouse","useState","CreatAccountView","setCreatAccountView","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","handleInputChange","useContext","UserContext","e","type","i","target","name","value","checked","test","length","useEffect","console","log","createWarehouseViewData","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","input","permissions","role","catch","err","className","onSubmit","preventDefault","swal","CreateAccountSave","status","window","location","reload","lg","md","MyDropdown","dropdown","label","_text","required","onChange","option","map","key","_attributes","ele","roles","find","includes","phoneinput","sm","inputClass","country","onKeyDown","countryCodeEditable","phone","style","color","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","CheckBox","marginRight","size","Radiobutton","Ripple"],"mappings":"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","file":"static/js/280.e70889a0.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  createWarehouseViewData,\r\n  CreateAccountView,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../../context/Context\";\r\n\r\nconst CreateWareHouse = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const createUserXmlView = useContext(UserContext);\r\n  // const [selectedCountry, setSelectedCountry] = useState(null);\r\n  // const [selectedState, setSelectedState] = useState(null);\r\n  // const [selectedCity, setSelectedCity] = useState(null);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    createWarehouseViewData()\r\n      .then(res => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData));\r\n        let origionalpermission =\r\n          JSON.parse(jsonData)?.CreateWareHouse?.input[14].permissions?.role;\r\n        // const rolePermissions = origionalpermission?.find(\r\n        //   (role) => role._attributes?.name === \"SUPERADMIN\"\r\n        // );\r\n        // console.log(rolePermissions);\r\n        // setpermissions(rolePermissions);\r\n        // console.log(permissions);\r\n        // console.log(rolePermissions?.canCreateUser._text.includes(\"true\"));\r\n        // console.log(rolePermissions?.canEditProfile._text.includes(\"true\"));\r\n        // console.log(rolePermissions?.canCreateUser._text.includes(\"true\"));\r\n\r\n        setCreatAccountView(JSON.parse(jsonData));\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      CreateAccountSave(formData)\r\n        .then(res => {\r\n          if (res.status) {\r\n            setFormData({});\r\n            window.location.reload();\r\n            swal(\"Acccont Created Successfully\");\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create WareHouse</h1>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateWareHouse?.MyDropdown?.dropdown\r\n                          ?.label?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateWareHouse?.MyDropdown?.dropdown\r\n                          ?.name?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateWareHouse?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateWareHouse?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.CreateWareHouse?.input?.map((ele, i) => {\r\n                    let View = \"\";\r\n                    let Edit = \"\";\r\n                    if (ele?.role) {\r\n                      let roles = ele?.role?.find(\r\n                        role => role._attributes?.name === \"WARRANTY APPROVER\"\r\n                      );\r\n\r\n                      View = roles?.permissions?._text.includes(\"View\");\r\n                      Edit = roles?.permissions?._text.includes(\"Edit\");\r\n                      {\r\n                        /* console.log(View, Edit); */\r\n                      }\r\n                    }\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          {/* {Edit && Edit ? ( */}\r\n                          <>\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <PhoneInput\r\n                                  inputClass=\"myphoneinput\"\r\n                                  country={\"us\"}\r\n                                  onKeyDown={e => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  countryCodeEditable={false}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={phone => {\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [ele?.name?._text]: phone,\r\n                                    });\r\n                                  }}\r\n                                  // onChange={handleInputChange}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                          {/* ) : (\r\n                            <>\r\n                              {View && View ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                    <FormGroup>\r\n                                      <Label>{ele?.label?._text}</Label>\r\n                                      <PhoneInput\r\n                                        disabled\r\n                                        inputClass=\"myphoneinput\"\r\n                                        country={\"us\"}\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        countryCodeEditable={false}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(phone) => {\r\n                                          setFormData({\r\n                                            ...formData,\r\n                                            [ele?.name?._text]: phone,\r\n                                          });\r\n                                        }}\r\n                                        // onChange={handleInputChange}\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : null}\r\n                            </>\r\n                          )} */}\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.country}\r\n                                onChange={country => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"country\"]: country,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  formData?.country?.isoCode\r\n                                )}\r\n                                getOptionLabel={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.State}\r\n                                onChange={State => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  formData?.State?.countryCode,\r\n                                  formData?.State?.isoCode\r\n                                )}\r\n                                getOptionLabel={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.City}\r\n                                onChange={City => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {/* {Edit && Edit ? ( */}\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={e => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={e =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          {/* ) : (\r\n                            <>\r\n                              {View && View ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                    <FormGroup>\r\n                                      <Label>{ele?.label?._text}</Label>\r\n\r\n                                      <Input\r\n                                        disabled\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        type={ele?.type?._attributes?.type}\r\n                                        placeholder={ele?.placeholder?._text}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(e) =>\r\n                                          handleInputChange(\r\n                                            e,\r\n                                            ele?.type?._attributes?.type,\r\n                                            i\r\n                                          )\r\n                                        }\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : null}\r\n                            </>\r\n                          )} */}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n\r\n                <div className=\"container\">\r\n                  <Label className=\"py-1\">Notification</Label>\r\n                  <div>\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateWareHouse?.CheckBox?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <>\r\n                              <span key={i} className=\"mx-2\">\r\n                                <Input\r\n                                  style={{ marginRight: \"3px\" }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  name={ele?.name?._text}\r\n                                  onChange={e =>\r\n                                    handleInputChange(e, \"checkbox\")\r\n                                  }\r\n                                />{\" \"}\r\n                                <span\r\n                                  className=\"mt-1 mx-1\"\r\n                                  style={{ marginRight: \"40px\" }}\r\n                                >\r\n                                  {ele?.label?._text == \"Whatsapp\" ? (\r\n                                    <BsWhatsapp\r\n                                      className=\"mx-1\"\r\n                                      color=\"#59CE72\"\r\n                                      size={25}\r\n                                    />\r\n                                  ) : (\r\n                                    <>\r\n                                      {ele.label?._text == \"SMS\" ? (\r\n                                        <>\r\n                                          <FcPhoneAndroid size={30} />\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <BiEnvelope className=\"\" size={30} />\r\n                                        </>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                  {/* <BsWhatsapp\r\n                              className=\"mx-1\"\r\n                              color=\"#59CE72\"\r\n                              size={25}\r\n                            /> */}\r\n                                </span>\r\n                              </span>\r\n                              {/* <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                            </FormGroup>\r\n                          </Col> */}\r\n                            </>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateWareHouse?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateWareHouse;\r\n"],"sourceRoot":""}