{"version":3,"sources":["views/apps/freshlist/accounts/CreateAccount.js"],"names":["CreateAccount","useState","CreatAccountView","setCreatAccountView","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","handleInputChange","e","type","i","target","name","value","checked","test","length","useEffect","console","log","UserInformatio","dateFormat","latitude","longitude","CreateAccountView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","CheckBox","input","map","ele","_text","catch","err","className","onSubmit","preventDefault","swal","CreateAccountSave","status","window","location","reload","lg","md","MyDropdown","dropdown","label","required","onChange","option","key","_attributes","moment","tz","format","phoneinput","sm","inputClass","country","onKeyDown","includes","countryCodeEditable","phone","style","color","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","timeZone","marginRight","size","Radiobutton","Ripple"],"mappings":"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","file":"static/js/255.7a8c6875.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\n\r\nconst CreateAccount = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState({});\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n    console.log(Context?.UserInformatio?.dateFormat);\r\n\r\n    console.log(Cities?.latitude, Cities?.longitude);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    CreateAccountView()\r\n      .then(res => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData));\r\n\r\n        setCreatAccountView(JSON.parse(jsonData));\r\n        let value = JSON.parse(jsonData)?.CreateAccount?.CheckBox?.input;\r\n        value?.map(ele => {\r\n          formData[ele?.name._text] = false;\r\n        });\r\n\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      CreateAccountSave(formData)\r\n        .then(res => {\r\n          setFormData({});\r\n          if (res.status) {\r\n            window.location.reload();\r\n            swal(\"Acccont Created Successfully\");\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Account Creation</h1>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n                          ?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n                          ?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.CreateAccount?.input?.map((ele, i) => {\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n                    {\r\n                      /* console.log(convertedTime); */\r\n                    }\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"us\"}\r\n                                onKeyDown={e => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={phone => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        console.log(ele);\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={country => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={State => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={options => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={City => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={e => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={e =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={e => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={e =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup key={i}>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={e => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={e =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n\r\n                <div className=\"container\">\r\n                  <Label className=\"py-1\">Notification</Label>\r\n                  <div>\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.CheckBox?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <>\r\n                              <span key={i} className=\"mx-2\">\r\n                                <Input\r\n                                  style={{ marginRight: \"3px\" }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  name={ele?.name?._text}\r\n                                  onChange={e =>\r\n                                    handleInputChange(e, \"checkbox\")\r\n                                  }\r\n                                />{\" \"}\r\n                                <span\r\n                                  className=\"mt-1 mx-1\"\r\n                                  style={{ marginRight: \"40px\" }}\r\n                                >\r\n                                  {ele?.label?._text == \"Whatsapp\" ? (\r\n                                    <BsWhatsapp\r\n                                      className=\"mx-1\"\r\n                                      color=\"#59CE72\"\r\n                                      size={25}\r\n                                    />\r\n                                  ) : (\r\n                                    <>\r\n                                      {ele.label?._text == \"SMS\" ? (\r\n                                        <>\r\n                                          <FcPhoneAndroid size={30} />\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <BiEnvelope className=\"\" size={30} />\r\n                                        </>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                </span>\r\n                              </span>\r\n                              {/* <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                            </FormGroup>\r\n                          </Col> */}\r\n                            </>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateAccount;\r\n"],"sourceRoot":""}